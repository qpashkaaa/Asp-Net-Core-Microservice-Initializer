version: "3.9"

networks:
  app-network:

services:
<Server>
  server:
    build:
      # Можно либо обратиться к конкретному image, либо к Dockerfile.
      #image:
      #context: 
      #dockerfile: 
    container_name: server
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "8000:8000"
    env_file: ${ENV_FILE}
    networks:
      - app-network
</Server>

<Client>
  client:
    build:
      # Можно либо обратиться к конкретному image, либо к Dockerfile.
      #image:
      #context: 
      #dockerfile: 
    container_name: client
    depends_on:
      server:
        condition: service_started
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "8001:8001"
    env_file: ${ENV_FILE}
    networks:
      - app-network
</Client>

<Adminer>
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8002:8002"
    environment:
      TZ: ${TIME_ZONE}
    networks:
      - app-network
</Adminer>

<MongoDb>
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: your_username
      MONGO_INITDB_ROOT_PASSWORD: your_password
      TZ: ${TIME_ZONE}
    ports:
      - "27017:27017"
    networks:
      - app-network
</MongoDb>

<MongoExpress>
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    depends_on:
      - mongodb
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: examplepass
      ME_CONFIG_MONGODB_SERVER: mongodb
      TZ: ${TIME_ZONE}
    networks:
      - app-network
</MongoExpress>

<ClickHouse>
  clickhouse:
    image: yandex/clickhouse-server:latest
    container_name: clickhouse
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - app-network
</ClickHouse>

<MySql>
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      TZ: ${TIME_ZONE}
    ports:
      - "3306:3306"
    networks:
      - app-network
</MySql>

<Redis>
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "6379:6379"
    networks:
      - app-network
</Redis>

<Elasticsearch>
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:latest
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      TZ: ${TIME_ZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
</Elasticsearch>

<Kibana>
  kibana:
    image: docker.elastic.co/kibana/kibana:latest
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      TZ: ${TIME_ZONE}
    networks:
      - app-network
</Kibana>

<Cassandra>
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=my_cluster
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RAC1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      TZ: ${TIME_ZONE}
    networks:
      - app-network
</Cassandra>

<RabbitMq>
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # порт для AMQP
      - "15672:15672"  # порт для веб-интерфейса управления
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      TZ: ${TIME_ZONE}
    networks:
      - app-network
</RabbitMq>

<Prometheus>
  prometheus:
    image: prom/prometheus:latest
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "9090:9090"
    networks:
      - app-network
</Prometheus>

<Grafana>
  grafana:
    image: grafana/grafana:latest
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "3000:3000"
    networks:
      - app-network
</Grafana>

<Nginx>
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - app-network
</Nginx>

<PostgreSql>
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      TZ: ${TIME_ZONE}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file: ${ENV_FILE}
    networks:
      - app-network
</PostgreSql>