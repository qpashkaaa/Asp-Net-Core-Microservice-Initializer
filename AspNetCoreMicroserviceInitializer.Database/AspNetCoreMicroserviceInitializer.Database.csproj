<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <Title>This library contains the basic interfaces and abstract repositories classes for working with databases to quickly deploy a microservice on .NET 8. Supports Sql Databases (Entity Framework), MongoDB, Redis.</Title>
        <Authors>Pavel Roslyakov</Authors>
        <Description>This library contains the basic interfaces and abstract repositories classes for working with databases to quickly deploy a microservice on .NET 8.

The most up-to-date documentation on GitHub Wiki: https://github.com/qpashkaaa/Asp-Net-Core-Microservice-Initializer/wiki</Description>
        <PackageProjectUrl>https://github.com/qpashkaaa/Asp-Net-Core-Microservice-Initializer</PackageProjectUrl>
        <PackageIcon>icon.png</PackageIcon>
        <PackageTags>.NET 8, Microservice, Microservices, Database, Repository, IEntity, RepositoryInterfaces, EntityFramework</PackageTags>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageReadmeFile>Readme.md</PackageReadmeFile>
        <Version>1.2.0</Version>
        <PackageReleaseNotes>Big changes to the library group:

Updated documentation: https://github.com/qpashkaaa/Asp-Net-Core-Microservice-Initializer/wiki.

AspNetCoreMicroserviceInitializer.Database
- Interfaces, custom clients, attributes and abstract repositories for MongoDB and Redis have been added.
- The MongoCollectionAttribute has been added to specify the collection name.
- Renamed the IEntity entity to ISqlEntity.
- Renamed the IRepository and RepositoryBase to ISqlRepository and SqlRepositoryBase and similar entities.


AspNetCoreMicroserviceInitializer.Registrations
- Added the modules to automatically register WebApplicationModules.MongoDatabase and WebApplicationModules.RedisDatabase modules in WebApplicationFacade.

AspNetCoreMicroserviceInitializer.TradingDesk
- The AutoRegister RepositoryAttribute has added the ability to pass the interface type and ServiceLifetime as parameters for registration in DI.
- Basic configuration models have been added for using the MongoDB and Redis module (MongoSettingsBase, RedisSettingsBase).</PackageReleaseNotes>
    </PropertyGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.0" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.0">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="9.0.0" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.0">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="MongoDB.Driver" Version="3.0.0" />
      <PackageReference Include="StackExchange.Redis" Version="2.8.22" />
    </ItemGroup>

    <ItemGroup>
      <None Update="icon.png">
        <Pack>True</Pack>
        <PackagePath>\</PackagePath>
      </None>
      <None Update="Readme.md">
        <Pack>True</Pack>
        <PackagePath>\</PackagePath>
      </None>
    </ItemGroup>

</Project>
